<?php

namespace Puzzle\MediaBundle\Repository;

use Puzzle\AdminBundle\Repository\PuzzleRepository;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends PuzzleRepository
{
	/**
	 * Find files which are pictures
	 *
	 * @return array
	 */
	public function findPictures()
	{
		return $this->_em
					->createQuery("SELECT f FROM ". $this->_entityName . " f JOIN f.picture p WHERE p.id IS NOT NULL ORDER BY f.createdAt DESC")
					->getResult();
	}
	
	/**
	 * Find files which are audios
	 *
	 * @return array
	 */
	public function findAudios()
	{
		return $this->_em
		            ->createQueryBuilder()
		            ->select('f')
		            ->from($this->_entityName, 'f')
		            ->innerJoin('f.audio', 'a')
		            ->where('a.id IS NOT NULL')
		            ->orderBy('f.createdAt', 'DESC')
		            ->getQuery()
		            ->execute();
	}
	
	/**
	 * Find files which are videos
	 *
	 * @return array
	 */
	public function findVideos()
	{
		return $this->_em
					->createQuery("SELECT f FROM ". $this->_entityName . " f JOIN f.video v WHERE v.id IS NOT NULL ORDER BY f.createdAt DESC")
					->getResult();
	}
	
	/**
	 * Find files which are documents
	 *
	 * @return array
	 */
	public function findDocuments()
	{
		return $this->_em
					->createQuery("SELECT f FROM ". $this->_entityName . " f JOIN f.document d WHERE d.id IS NOT NULL ORDER BY f.createdAt DESC")
					->getResult();
	}
	
	/**
	 * Find files which are pictures
	 *
	 * @param string $list
	 * @return array
	 */
	public function findByListIdInversed($list)
	{
		$array = explode(",", $list);
		foreach ($array as $key => $item){
			if($key == 0){
				$list = "'".$item."'";
			}else{
				$list .= ",'".$item."'";
			}
		}
		return $this->_em
					->createQuery("SELECT f FROM ". $this->_entityName . " f WHERE f.id NOT IN (".$list.")")
// 					->setParameter(':list', $list)
					->getResult();
	}
	
	/**
	 * Find by path
	 * mixed paths list or array of paths
	 */
	public function findByPaths($paths)
	{
		$paths = !is_array($paths) ? [$paths] : $paths;
		$listPaths = "";
		foreach ($paths as $key => $item){
			if($key == 0){
				$listPaths = "'".$item."'";
			}else{
				$listPaths .= ",'".$item."'";
			}
		}
		
		return $this->_em
		->createQuery("SELECT f FROM ". $this->_entityName . " f WHERE f.path IN (".$listPaths.")")
// 					->setParameter('listPaths',$listPaths)
					->getResult();
	}
}
